// Generated by gencpp from file rvo_ros/SetGoalsRequest.msg
// DO NOT EDIT!


#ifndef RVO_ROS_MESSAGE_SETGOALSREQUEST_H
#define RVO_ROS_MESSAGE_SETGOALSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace rvo_ros
{
template <class ContainerAllocator>
struct SetGoalsRequest_
{
  typedef SetGoalsRequest_<ContainerAllocator> Type;

  SetGoalsRequest_()
    : model()
    , coordinates()  {
    }
  SetGoalsRequest_(const ContainerAllocator& _alloc)
    : model(_alloc)
    , coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_type;
  _model_type model;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _coordinates_type;
  _coordinates_type coordinates;





  typedef boost::shared_ptr< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGoalsRequest_

typedef ::rvo_ros::SetGoalsRequest_<std::allocator<void> > SetGoalsRequest;

typedef boost::shared_ptr< ::rvo_ros::SetGoalsRequest > SetGoalsRequestPtr;
typedef boost::shared_ptr< ::rvo_ros::SetGoalsRequest const> SetGoalsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rvo_ros::SetGoalsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rvo_ros::SetGoalsRequest_<ContainerAllocator1> & lhs, const ::rvo_ros::SetGoalsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model == rhs.model &&
    lhs.coordinates == rhs.coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rvo_ros::SetGoalsRequest_<ContainerAllocator1> & lhs, const ::rvo_ros::SetGoalsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rvo_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d1f7652138c35224f362d4e27f4f70e";
  }

  static const char* value(const ::rvo_ros::SetGoalsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d1f7652138c3522ULL;
  static const uint64_t static_value2 = 0x4f362d4e27f4f70eULL;
};

template<class ContainerAllocator>
struct DataType< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rvo_ros/SetGoalsRequest";
  }

  static const char* value(const ::rvo_ros::SetGoalsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model\n"
"geometry_msgs/Point[] coordinates\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rvo_ros::SetGoalsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model);
      stream.next(m.coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGoalsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rvo_ros::SetGoalsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rvo_ros::SetGoalsRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "coordinates: ";
    if (v.coordinates.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.coordinates[i]);
    }
    if (v.coordinates.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // RVO_ROS_MESSAGE_SETGOALSREQUEST_H
