// Generated by gencpp from file rvo_ros/SetGoalsResponse.msg
// DO NOT EDIT!


#ifndef RVO_ROS_MESSAGE_SETGOALSRESPONSE_H
#define RVO_ROS_MESSAGE_SETGOALSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rvo_ros
{
template <class ContainerAllocator>
struct SetGoalsResponse_
{
  typedef SetGoalsResponse_<ContainerAllocator> Type;

  SetGoalsResponse_()
    : num_goal(0)  {
    }
  SetGoalsResponse_(const ContainerAllocator& _alloc)
    : num_goal(0)  {
  (void)_alloc;
    }



   typedef int64_t _num_goal_type;
  _num_goal_type num_goal;





  typedef boost::shared_ptr< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetGoalsResponse_

typedef ::rvo_ros::SetGoalsResponse_<std::allocator<void> > SetGoalsResponse;

typedef boost::shared_ptr< ::rvo_ros::SetGoalsResponse > SetGoalsResponsePtr;
typedef boost::shared_ptr< ::rvo_ros::SetGoalsResponse const> SetGoalsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rvo_ros::SetGoalsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rvo_ros::SetGoalsResponse_<ContainerAllocator1> & lhs, const ::rvo_ros::SetGoalsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.num_goal == rhs.num_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rvo_ros::SetGoalsResponse_<ContainerAllocator1> & lhs, const ::rvo_ros::SetGoalsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rvo_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7213b2fb0a7852c514b409e9c0931450";
  }

  static const char* value(const ::rvo_ros::SetGoalsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7213b2fb0a7852c5ULL;
  static const uint64_t static_value2 = 0x14b409e9c0931450ULL;
};

template<class ContainerAllocator>
struct DataType< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rvo_ros/SetGoalsResponse";
  }

  static const char* value(const ::rvo_ros::SetGoalsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 num_goal\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::rvo_ros::SetGoalsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGoalsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rvo_ros::SetGoalsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rvo_ros::SetGoalsResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "num_goal: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RVO_ROS_MESSAGE_SETGOALSRESPONSE_H
